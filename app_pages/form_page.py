import streamlit as st
from dotenv import load_dotenv
from openai import OpenAI
  # Correct import for OpenRouter
from langchain_openai import ChatOpenAI  
load_dotenv()
api_key=os.getenv("OPENROUTER_API_KEY")
# Function to call the Gemma 3 API and get the response
def query_gemma_api(user_data):
    client = OpenRouter(
        base_url="https://openrouter.ai/api/v1",  # OpenRouter API URL
        api_key=api_key
    )

    # Send user data (age, income, caste, etc.) to the Gemma 3 API
    user_query = f"""
    Age: {user_data['age']}, 
    Income: {user_data['income']}, 
    Caste: {user_data['caste']}, 
    Gender: {user_data['gender']}, 
    Education Level: {user_data['edu']}, 
    Percentage: {user_data['perc']}, 
    Additional Info: {user_data['extra']}
    """

    # Send the data to the API
    completion = client.chat.completions.create(
        extra_headers={
            "HTTP-Referer": "http://localhost:8501/",  # Replace with your website URL
            "X-Title": "Scholarship Eligibility Checker"
        },
        model="google/gemma-3-27b-it:free",  # Gemma 3 Model
        messages=[
            {
                "role": "user",
                "content": user_query  # Send user query to the model
            }
        ]
    )

    # Return the response generated by Gemma 3
    return completion.choices[0].message.content


def show():
    st.title("ðŸ“‹ Scholarship Form")

    # Collect user inputs
    age = st.number_input("Enter your age", min_value=0)
    income = st.number_input("Enter your family income", min_value=0)
    caste = st.selectbox("Caste Category", ["General", "OBC", "SC", "ST"])
    gender = st.selectbox("Gender", ["Male", "Female", "Other"])
    edu = st.selectbox("Education Level", ["10th", "12th", "UG", "PG"])
    perc = st.slider("Enter your percentage", 0, 100)

    extra = st.text_area("Any additional info")

    # Create a submit button
    if st.button("Submit"):
        # Create a dictionary with the user inputs
        user_data = {
            'age': age,
            'income': income,
            'caste': caste,
            'gender': gender,
            'edu': edu,
            'perc': perc,
            'extra': extra
        }

        # Save the user data to session state
        st.session_state.user_data = user_data

        # Call the Gemma 3 API with the user data
        response = query_gemma_api(user_data)

        # Save the API response to session state for use on the output page
        st.session_state.response = response
        st.session_state["page"] = "Output"

        # Redirect to the output page to display the response
        st.experimental_rerun()
